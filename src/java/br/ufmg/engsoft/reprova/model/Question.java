package br.ufmg.engsoft.reprova.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * The question type.
 */
public class Question {
  /**
   * The id of the question.
   * When null, the id will be automatically generated by the database.
   */
  public final String id;
  /**
   * The theme of the question. Mustn't be null nor empty.
   */
  public final String theme;
  /**
   * The description of the question. Mustn't be null nor empty.
   */
  public final String description;
  /**
   * The statement of the question. May be null or empty.
   */
  public final String statement;
  /**
   * The record of the question per semester per class. Mustn't be null, may be empty.
   */
  public final Map<Semester, Map<String, Float>> record;
  /**
   * Whether the question is private.
   */
  public final boolean pvt;
  /**
   * The difficulty of the question. May have different groupings.
   */
  public String difficulty;
  /**
   * The difficulty's possible values.
   */
  private final List<String> difficultyGroup;

  private List<Answer> answers;

  /**
   * Builder for Question.
   */
  public static class Builder {
    protected String id;
    protected String theme;
    protected String description;
    protected String statement;
    protected Map<Semester, Map<String, Float>> record;
    protected boolean pvt = true;
    protected List<Answer> answers;
    protected String difficulty;
    protected List<String> difficultyGroup;

    public Builder id(String id) {
      this.id = id;
      return this;
    }

    public Builder theme(String theme) {
      this.theme = theme;
      return this;
    }

    public Builder description(String description) {
      this.description = description;
      return this;
    }

    public Builder statement(String statement) {
      this.statement = statement;
      return this;
    }

    public Builder record(Map<Semester, Map<String, Float>> record) {
      this.record = record;
      return this;
    }

    public Builder pvt(boolean pvt) {
      this.pvt = pvt;
      return this;
    }

    public Builder difficulty(String difficulty){
      this.difficulty = difficulty;
      return this;
    }
    
    public Builder difficultyGroup(List<String> difficulty){
      this.difficultyGroup = difficultyGroup;
      return this;
    }


    /**
     * Build the question.
     * @throws IllegalArgumentException  if any parameter is invalid
     */
    public Question build() {
      if (theme == null) {
        throw new IllegalArgumentException("theme mustn't be null");
      }

      if (theme.isEmpty()) {
        throw new IllegalArgumentException("theme mustn't be empty");
      }

      if (description == null) {
        throw new IllegalArgumentException("description mustn't be null");
      }

      if (description.isEmpty()) {
        throw new IllegalArgumentException("description mustn't be empty");
      }

      if (this.record == null) {
        this.record = new HashMap<Semester, Map<String, Float>>();
      } else {
        // All inner maps mustn't be null:
        for (var entry : this.record.entrySet()) {
        	if (entry.getValue() == null) {
                throw new IllegalArgumentException("inner record mustn't be null");
        	}
        }    
      }
      
      String answersEnabled = System.getenv("ENABLE_ANSWERS"); 
      if (answersEnabled != null && answersEnabled.equals("true")) {
    	  this.answers = new ArrayList<Answer>();
      }

      String envDifficultyGroup = System.getenv("DIFFICULTY_GROUP");
      if (envDifficultyGroup != null){
        if (envDifficultyGroup.equals("3")){
          this.difficultyGroup = new DifficultyFactory(3).difficultyGroup.getDifficulties();
        } else {
          this.difficultyGroup = new DifficultyFactory(5).difficultyGroup.getDifficulties();
        }
      } else {
        this.difficultyGroup = null;
      }

      return new Question(
        this.id,
        this.theme,
        this.description,
        this.statement,
        this.record,
        this.pvt,
        this.answers,
        this.difficulty,
        this.difficultyGroup
      );
    }
  }

  /**
   * Protected constructor, should only be used by the builder.
   */
  protected Question(
    String id,
    String theme,
    String description,
    String statement,
    Map<Semester, Map<String, Float>> record,
    boolean pvt,
    List<Answer> answers,
    String difficulty,
    List<String> difficultyGroup
  ) {
    this.id = id;
    this.theme = theme;
    this.description = description;
    this.statement = statement;
    this.record = record;
    this.pvt = pvt;
    this.difficulty = difficulty;
    this.difficultyGroup = difficultyGroup;
  }


  /**
   * Calculate the difficulty based on the record and the difficultyGroup.
   * Should be called when changes are made to the record.
   */
  public void calculateDifficulty(){
    if (this.difficultyGroup == null){
      return;
    }

    double acc = 0;
    for (Map.Entry<Semester, Map<String, Float>> entry : this.record.entrySet()) {
      acc += entry.getValue().values().stream().mapToDouble(Float::doubleValue).average().orElse(0);
    };

    double avg = acc/this.record.size();
    int difficultyIndex = new DifficultyFactory().difficultyGroup.getDifficultyGroup(avg);
    this.difficulty = this.difficultyGroup.get(difficultyIndex);
  }


  /**
   * Equality comparison.
   * Although this object has an id, equality is checked on all fields.
   */
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }

    if (!(obj instanceof Question)) {
      return false;
    }

    var question = (Question) obj;

    return this.id.equals(question.id)
        && this.theme.equals(question.theme)
        && this.description.equals(question.description)
        && this.statement.equals(question.statement)
        && this.record.equals(question.record)
        && this.pvt == question.pvt
        && this.difficulty.equals(question.difficulty);
  }


  @Override
  public int hashCode() {
    return Objects.hash(
      this.id,
      this.theme,
      this.description,
      this.statement,
      this.record,
      this.pvt,
      this.difficulty
    );
  }


  /**
   * Convert a Question to String for visualization purposes.
   */
  @Override
  public String toString() {
    var builder = new StringBuilder();

    builder.append("Question:\n");
    builder.append("  id: " + this.id + "\n");
    builder.append("  theme: " + this.theme + "\n");
    builder.append("  desc: " + this.description + "\n");
    builder.append("  record: " + this.record + "\n");
    builder.append("  pvt: " + this.pvt + "\n");
    builder.append("  difficulty: " + this.difficulty + "\n");
    builder.append("  difficultyGroup: " + this.difficultyGroup + "\n");
    if (this.statement != null) {
      builder.append(
        "  head: " +
        this.statement.substring(
          0,
          Math.min(this.statement.length(), 50)
        ) +
        "\n"
      );
    }

    return builder.toString();
  }
}
