package br.ufmg.engsoft.reprova.model;

import java.util.ArrayList;

/**
 * The Questionnaire type
 */
public class Questionnaire{
  /**
   * The id of the question.
   * When null, the id will be automatically generated by the database.
   */
  public final String id;
  /**
   * The list of Questions in the Questionnaire
   */
  public final ArrayList<Question> questions;

  public static class Builder{
    protected String id;
    protected ArrayList<Question> questions;

    public Builder id(String id){
      this.id = id;
      return this;
    }

    public Builder questions(ArrayList<Question> questions){
      this.questions = questions;
      return this;
    }

    /**
     * Build the Questionnaire;
     * @throws IllegalArgumentException if any parameter is invalid
     */

    public Questionnaire build() {
      if (this.questions == null){
        this.questions = new ArrayList<Question>();
      } else {
        for (var question : this.questions){
          if (question == null){
            throw new IllegalArgumentException("question mustn't be null");
          }
        }
      }

      return new Questionnaire(
        this.id,
        this.questions
      );
    }
  }

  /**
   * Protected constructor, should only be used by the builder.
   */
  protected Questionnaire(
    String id,
    ArrayList<Question> questions
  ){
    this.id = id;
    this.questions = questions;
  }

  /**
   * Convert a Question to String for visualization purposes.
   */
  @Override
  public String toString() {
    var builder = new StringBuilder();

    builder.append("Questionnaire:\n");
    builder.append("  id: " + this.id + "\n");
    builder.append("  questions:\n");
    for (var question : this.questions){
      builder.append("    id: " + question.id + "\n");
      builder.append("      theme: " + question.theme + "\n");
      builder.append("      desc: " + question.description + "\n");
      builder.append("      record: " + question.record + "\n");
      builder.append("      pvt: " + question.pvt + "\n");
      builder.append("      difficulty: " + question.difficulty + "\n");

      if (question.statement != null) {
        builder.append(
          "  head: " +
          question.statement.substring(
            0,
            Math.min(question.statement.length(), 50)
          ) +
          "\n"
        );
      }
    }

    return builder.toString();
  }
}